import 'dotenv/config'
import express from 'express'
import cors from 'cors'
import bodyParser from 'body-parser'
import OpenAI from 'openai'
import { createClient } from '@supabase/supabase-js'

const app = express()
app.use(cors())
app.use(bodyParser.json({ limit: '5mb' }))

const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

// Configurar Supabase
const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY
const supabase = createClient(supabaseUrl, supabaseKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

const systemReport = `Eres un asistente cl√≠nico dental. Redacta un *informe preliminar* claro y profesional basado en:
- Datos del paciente
- Historia cl√≠nica (salud general, dental, h√°bitos, antecedentes)
Estructura sugerida:
1) Motivo de consulta y hallazgos relevantes
2) Factores de riesgo y antecedentes significativos
3) Impresiones cl√≠nicas preliminares (NO diagn√≥stico definitivo)
4) Sugerencias de estudios / radiograf√≠as complementarias
5) Recomendaciones de cuidado e higiene
6) Plan tentativo y prioridades
Usa un tono emp√°tico, evita jerga compleja y agrega bullets cuando convenga. Incluye advertencia: "Este reporte es informativo y no sustituye la evaluaci√≥n cl√≠nica."`

const systemAssistant = `Eres un asistente virtual dental para pacientes de una cl√≠nica. Responde con empat√≠a, brevedad y pasos accionables.`

const systemIntelligentAssistant = `Eres un asistente virtual inteligente para una cl√≠nica dental. Tu funci√≥n es ayudar al dentista con informaci√≥n PRECISA y ACTUALIZADA sobre:

1. **INFORMACI√ìN DE PACIENTES**: Acceso completo a historias cl√≠nicas, antecedentes m√©dicos, historial de citas, odontogramas y archivos.

2. **GESTI√ìN DE AGENDA**: Consultas sobre citas programadas, disponibilidad, estad√≠sticas de la cl√≠nica.

3. **AN√ÅLISIS CL√çNICO**: Interpretaci√≥n de datos m√©dicos, identificaci√≥n de factores de riesgo, sugerencias de seguimiento.

4. **ASISTENCIA OPERATIVA**: Ayuda con procedimientos, recordatorios, seguimiento de tratamientos.

REGLAS CR√çTICAS:
- ‚úÖ SIEMPRE usa SOLO la informaci√≥n proporcionada en el contexto de la base de datos.
- ‚ùå NUNCA inventes, generes o asumas datos ficticios.
- ‚ùå NUNCA uses informaci√≥n de "ejemplo" o "t√≠pica".
- ‚ùå NUNCA hagas suposiciones sobre fechas, nombres o n√∫meros.
- üîç Si no tienes informaci√≥n sobre algo, di claramente "No tengo esa informaci√≥n disponible en la base de datos".
- üìä S√© preciso y espec√≠fico con fechas, n√∫meros y detalles exactos.
- üìù Usa el formato Markdown para organizar la informaci√≥n claramente.

IMPORTANTE: Solo puedes responder con datos que est√©n expl√≠citamente en el contexto proporcionado. Si te preguntan por "todas las consultas del mes" y solo tienes 3 citas en la base, di exactamente eso: "Este mes hay 3 citas registradas" y lista las 3 espec√≠ficas.

Responde en espa√±ol, s√© exhaustivo y mant√©n un tono profesional pero accesible.`

const systemPatientAssistant = `Eres un asistente virtual de salud dental personalizado para pacientes. Tu funci√≥n es:

1. **ATENCI√ìN PERSONALIZADA**: Siempre usa el nombre del paciente cuando te dirijas a √©l/ella.
2. **INFORMACI√ìN M√âDICA**: Proporciona respuestas basadas en el historial m√©dico del paciente.
3. **CONSEJOS DE SALUD**: Ofrece recomendaciones personalizadas seg√∫n sus h√°bitos y condiciones.
4. **EDUCACI√ìN DENTAL**: Explica procedimientos y cuidados de manera clara y comprensible.
5. **SEGURIDAD**: Siempre recomienda consultar con el dentista para casos espec√≠ficos.

REGLAS IMPORTANTES:
- ‚úÖ Usa el nombre del paciente en tus respuestas
- ‚úÖ Basa tus respuestas en la informaci√≥n m√©dica proporcionada
- ‚úÖ S√© emp√°tico y profesional
- ‚úÖ Proporciona consejos pr√°cticos y accionables
- ‚ùå NO hagas diagn√≥sticos definitivos
- ‚ùå NO prescribas medicamentos
- ‚ùå NO sustituyas la consulta m√©dica profesional
- üîç Si no tienes informaci√≥n sobre algo, di claramente que consultes con su dentista

Responde en espa√±ol, s√© amigable pero profesional, y siempre prioriza la seguridad del paciente.`

// Sistema mejorado para generaci√≥n de informes m√©dicos
const systemMedicalReport = `Eres un asistente cl√≠nico dental especializado en generar informes m√©dicos completos y profesionales. 

Tu funci√≥n es crear informes m√©dicos detallados basados en:
- Datos completos del paciente
- Historia cl√≠nica m√©dica y dental
- Consultas y tratamientos previos
- Antecedentes familiares y h√°bitos
- Ex√°menes y hallazgos cl√≠nicos

ESTRUCTURA DEL INFORME:
1. **INFORMACI√ìN DEL PACIENTE** - Datos b√°sicos y demogr√°ficos
2. **RESUMEN EJECUTIVO** - S√≠ntesis detallada de la situaci√≥n cl√≠nica con an√°lisis integral
3. **HISTORIA CL√çNICA** - Antecedentes m√©dicos relevantes y an√°lisis de tendencias
4. **EXAMEN CL√çNICO** - Hallazgos y observaciones detalladas
5. **DIAGN√ìSTICO PRELIMINAR** - Evaluaci√≥n basada en evidencia con an√°lisis profundo
6. **AN√ÅLISIS CL√çNICO DETALLADO** - Evaluaci√≥n integral de la salud bucal
7. **PLAN DE TRATAMIENTO** - Estrategia terap√©utica propuesta paso a paso
8. **RECOMENDACIONES** - Cuidados y seguimiento personalizados
9. **PR√ìXIMOS PASOS** - Plan de seguimiento con cronograma
10. **FACTORES DE RIESGO** - Consideraciones especiales y estrategias de mitigaci√≥n
11. **OBSERVACIONES CL√çNICAS** - Notas adicionales y consideraciones especiales
12. **RESUMEN DE DIAGN√ìSTICO** - S√≠ntesis clara del estado actual y pron√≥stico
13. **RESUMEN INTELIGENTE** - An√°lisis sint√©tico y conclusiones clave generadas por IA

REGLAS IMPORTANTES:
- Usa un lenguaje m√©dico profesional pero accesible
- Incluye fechas espec√≠ficas y datos concretos
- Identifica factores de riesgo claramente
- Proporciona recomendaciones espec√≠ficas y accionables
- Mant√©n un tono emp√°tico y profesional
- Incluye advertencias de seguridad cuando sea necesario
- Usa formato Markdown para mejor legibilidad
- Siempre incluye la fecha de generaci√≥n del informe
- Genera contenido adicional como an√°lisis de tendencias, observaciones cl√≠nicas y res√∫menes de diagn√≥stico
- Incluye evaluaciones comparativas con est√°ndares de salud dental
- Proporciona insights cl√≠nicos basados en los datos disponibles
- AL FINAL del informe, despu√©s de todas las secciones, incluye una secci√≥n **RESUMEN INTELIGENTE** con un an√°lisis sint√©tico y conclusiones clave generadas por IA

INSTRUCCIONES ESPEC√çFICAS PARA EL RESUMEN INTELIGENTE:
- Debe ser la √öLTIMA secci√≥n del informe
- Usa el formato: **RESUMEN INTELIGENTE**
- Incluye un an√°lisis sint√©tico de 2-3 p√°rrafos
- Destaca las conclusiones m√°s importantes
- Proporciona insights cl√≠nicos clave
- Mant√©n un tono profesional pero accesible
- Incluye recomendaciones prioritarias
- Termina con una perspectiva del pron√≥stico

IMPORTANTE: SIEMPRE debes incluir la secci√≥n **RESUMEN INTELIGENTE** al final de tu respuesta. Es OBLIGATORIO que aparezca esta secci√≥n.

IMPORTANTE: Este es un informe preliminar generado por IA. No sustituye la evaluaci√≥n cl√≠nica directa del profesional de la salud.`

// Endpoint mejorado para informe cl√≠nico
app.post('/api/ai/report', async (req, res) => {
  try {
    const { 
      patient, 
      history, 
      consultations, 
      reportType = 'comprehensive',
      consultationId = null,
      dentistNotes = ''
    } = req.body

    // Preparar datos estructurados para el an√°lisis
    const clinicalData = {
      patient: {
        name: patient?.name,
        age: patient?.age,
        gender: patient?.gender || 'No especificado',
        occupation: patient?.occupation,
        phone: patient?.phone,
        email: patient?.email,
        address: patient?.address
      },
      medicalHistory: {
        allergies: patient?.allergies ? patient.allergy_details : 'No reportadas',
        chronicConditions: {
          diabetes: patient?.diabetes ? `S√≠ (${patient.diabetes_date || 'sin fecha'})` : 'No',
          hypertension: patient?.high_blood_pressure ? `S√≠ (${patient.high_blood_pressure_date || 'sin fecha'})` : 'No',
          heartDisease: patient?.heart_attack ? `S√≠ (${patient.heart_attack_date || 'sin fecha'})` : 'No',
          asthma: patient?.asthma ? `S√≠ (${patient.asthma_date || 'sin fecha'})` : 'No',
          other: patient?.other_diseases ? patient.other_diseases_details : 'No reportadas'
        },
        medications: patient?.current_treatment ? patient.current_treatment_details : 'No reportados',
        familyHistory: patient?.family_history || 'No reportada'
      },
      dentalHistory: {
        hygiene: {
          brushingsPerDay: patient?.brushings_per_day || 'No especificado',
          floss: patient?.floss ? 'S√≠' : 'No',
          mouthwash: patient?.mouthwash ? 'S√≠' : 'No'
        },
        symptoms: {
          pain: patient?.recent_pain ? 'S√≠' : 'No',
          bleeding: patient?.gum_bleeding || 'No reportado',
          badBreath: patient?.bad_breath ? 'S√≠' : 'No',
          clicking: patient?.jaw_clicking || 'No reportado'
        },
        habits: {
          bruxism: patient?.bruxism ? 'S√≠' : 'No',
          smoking: patient?.smoking ? `S√≠ (${patient.cigarettes_per_day || 'cantidad no especificada'})` : 'No',
          alcohol: patient?.alcohol ? `S√≠ (${patient.alcohol_frequency || 'frecuencia no especificada'})` : 'No'
        }
      },
      consultations: consultations?.map(c => ({
        date: c.consultation_date,
        type: c.consultation_type,
        symptoms: c.symptoms,
        findings: c.examination_findings,
        diagnosis: c.diagnosis,
        treatment: c.treatment_performed,
        prescriptions: c.prescriptions,
        recommendations: c.recommendations,
        notes: c.notes
      })) || [],
      reportType,
      dentistNotes
    }

    // Crear prompt espec√≠fico seg√∫n el tipo de informe
    let prompt = ''
    if (reportType === 'consultation') {
      prompt = `Genera un informe de consulta espec√≠fica basado en los datos de la consulta m√°s reciente.`
    } else if (reportType === 'diagnosis') {
      prompt = `Genera un informe de diagn√≥stico preliminar enfocado en la evaluaci√≥n cl√≠nica actual.`
    } else if (reportType === 'follow_up') {
      prompt = `Genera un informe de seguimiento comparando la evoluci√≥n del paciente.`
    } else {
      prompt = `Genera un informe m√©dico dental completo y comprehensivo.`
    }

    const completion = await client.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        { role: 'system', content: systemMedicalReport },
        { 
          role: 'user', 
          content: `${prompt}\n\nDatos cl√≠nicos del paciente:\n${JSON.stringify(clinicalData, null, 2)}` 
        }
      ],
      temperature: 0.3,
      max_tokens: 6000
    })
    
    const reportContent = completion.choices?.[0]?.message?.content || ''
    
    // Generar resumen inteligente personalizado basado en los datos del paciente
    let finalContent = reportContent
    
    // Siempre generar nuestro resumen personalizado
    console.log('Generando resumen inteligente personalizado para el paciente')
    console.log('Datos del paciente:', JSON.stringify(clinicalData.patient, null, 2))
    console.log('Datos cl√≠nicos completos:', JSON.stringify(clinicalData, null, 2))
    
    let intelligentSummary = ''
    try {
      intelligentSummary = generatePersonalizedIntelligentSummary(clinicalData, reportType)
      console.log('Resumen generado exitosamente:', intelligentSummary.substring(0, 200) + '...')
    } catch (error) {
      console.error('Error generando resumen inteligente:', error)
      intelligentSummary = `

**RESUMEN INTELIGENTE**

**An√°lisis Personalizado del Paciente ${clinicalData.patient?.name || 'Paciente'}**

Este an√°lisis integral del paciente ${clinicalData.patient?.name || 'Paciente'} (${clinicalData.patient?.age || 'N/A'} a√±os) revela un perfil cl√≠nico espec√≠fico que requiere atenci√≥n especializada. La evaluaci√≥n de los datos disponibles muestra un patr√≥n de salud dental que se caracteriza por la necesidad de un an√°lisis m√°s detallado.

**Conclusiones Clave Identificadas:**

La evaluaci√≥n cl√≠nica revela que ${clinicalData.patient?.name || 'el paciente'} presenta un perfil de riesgo que requiere evaluaci√≥n adicional. Se recomienda un seguimiento estrecho y la implementaci√≥n de medidas preventivas adaptadas a las necesidades particulares del paciente.

**Recomendaciones Prioritarias y Pron√≥stico:**

Basado en este an√°lisis personalizado, se recomienda un enfoque terap√©utico preventivo que incluya seguimiento regular y medidas preventivas. El pron√≥stico a corto plazo es favorable con el tratamiento adecuado, mientras que el pron√≥stico a largo plazo depende principalmente de la adherencia a las recomendaciones terap√©uticas.

Con el seguimiento adecuado y la implementaci√≥n de las medidas preventivas recomendadas, se espera una mejora significativa en el estado de salud dental del paciente ${clinicalData.patient?.name || 'Paciente'}.`
    }
    
    // Remover cualquier resumen inteligente del contenido principal
    if (finalContent.includes('**RESUMEN INTELIGENTE**')) {
      console.log('Removiendo resumen inteligente del contenido principal')
      finalContent = finalContent.split('**RESUMEN INTELIGENTE**')[0].trim()
    }
    
    // Extraer secciones del informe para almacenamiento estructurado
    const sections = extractAllSections(finalContent)

    res.json({ 
      text: finalContent,
      sections,
      intelligentSummary: intelligentSummary,
      model: 'gpt-4o',
      reportType,
      generatedAt: new Date().toISOString()
    })
  } catch (err) {
    console.error('Error generating medical report:', err)
    res.status(500).json({ error: err.message })
  }
})

// Funci√≥n auxiliar para extraer secciones del informe
function extractSection(content, sectionName) {
  const regex = new RegExp(`\\*\\*${sectionName}\\*\\*[\\s\\S]*?(?=\\*\\*|$)`, 'i')
  const match = content.match(regex)
  return match ? match[0].replace(`**${sectionName}**`, '').trim() : ''
}

// Helper function to extract multiple sections
function extractAllSections(content) {
  const sections = {
    summary: extractSection(content, 'RESUMEN EJECUTIVO'),
    diagnosis: extractSection(content, 'DIAGN√ìSTICO PRELIMINAR'),
    clinicalAnalysis: extractSection(content, 'AN√ÅLISIS CL√çNICO DETALLADO'),
    recommendations: extractSection(content, 'RECOMENDACIONES'),
    treatmentPlan: extractSection(content, 'PLAN DE TRATAMIENTO'),
    nextSteps: extractSection(content, 'PR√ìXIMOS PASOS'),
    riskFactors: extractSection(content, 'FACTORES DE RIESGO'),
    clinicalNotes: extractSection(content, 'OBSERVACIONES CL√çNICAS'),
    diagnosisSummary: extractSection(content, 'RESUMEN DE DIAGN√ìSTICO')
  }
  return sections
}

// Funci√≥n para generar resumen inteligente personalizado
function generatePersonalizedIntelligentSummary(clinicalData, reportType) {
  const patient = clinicalData.patient
  const medicalHistory = clinicalData.medicalHistory
  const dentalHistory = clinicalData.dentalHistory
  const currentSymptoms = clinicalData.currentSymptoms
  const hygieneHabits = clinicalData.hygieneHabits
  
  // An√°lisis de factores de riesgo
  const riskFactors = []
  if (medicalHistory.chronicConditions.diabetes !== 'No') riskFactors.push('diabetes')
  if (medicalHistory.chronicConditions.hypertension !== 'No') riskFactors.push('hipertensi√≥n')
  if (medicalHistory.chronicConditions.heartDisease !== 'No') riskFactors.push('enfermedad cardiovascular')
  if (dentalHistory.bruxism) riskFactors.push('bruxismo')
  if (dentalHistory.smoking) riskFactors.push('tabaquismo')
  if (dentalHistory.allergies) riskFactors.push('alergias')
  
  // An√°lisis de h√°bitos de higiene
  const hygieneScore = calculateHygieneScore(hygieneHabits)
  const hygieneLevel = hygieneScore >= 80 ? 'excelente' : hygieneScore >= 60 ? 'buena' : hygieneScore >= 40 ? 'regular' : 'deficiente'
  
  // An√°lisis de s√≠ntomas actuales
  const activeSymptoms = []
  if (currentSymptoms.pain) activeSymptoms.push('dolor dental')
  if (currentSymptoms.bleeding) activeSymptoms.push('sangrado gingival')
  if (currentSymptoms.sensitivity) activeSymptoms.push('sensibilidad dental')
  if (currentSymptoms.badBreath) activeSymptoms.push('halitosis')
  
  // Generar resumen personalizado
  let summary = `

**RESUMEN INTELIGENTE**

**An√°lisis Personalizado del Paciente ${patient.name}**

Este an√°lisis integral del paciente ${patient.name} (${patient.age} a√±os) revela un perfil cl√≠nico espec√≠fico que requiere atenci√≥n especializada. La evaluaci√≥n de los datos disponibles muestra un patr√≥n de salud dental que se caracteriza por `

  // Agregar an√°lisis espec√≠fico basado en los datos
  if (riskFactors.length > 0) {
    summary += `la presencia de factores de riesgo sist√©micos (${riskFactors.join(', ')}) que influyen directamente en la salud bucal, `
  }
  
  summary += `h√°bitos de higiene oral ${hygieneLevel} (puntuaci√≥n: ${hygieneScore}/100)`
  
  if (activeSymptoms.length > 0) {
    summary += `, y la manifestaci√≥n de s√≠ntomas activos como ${activeSymptoms.join(', ')}`
  }
  
  summary += `.`

  // Segundo p√°rrafo con conclusiones espec√≠ficas
  summary += `

**Conclusiones Clave Identificadas:**

La evaluaci√≥n cl√≠nica revela que ${patient.name} presenta un perfil de riesgo ${riskFactors.length > 2 ? 'elevado' : riskFactors.length > 0 ? 'moderado' : 'bajo'} debido a ${riskFactors.length > 0 ? `la presencia de ${riskFactors.length} factor(es) de riesgo sist√©mico(s)` : 'la ausencia de factores de riesgo sist√©micos significativos'}. `

  if (hygieneScore < 60) {
    summary += `Los h√°bitos de higiene oral requieren mejoras significativas, especialmente en ${getHygieneRecommendations(hygieneHabits)}. `
  } else if (hygieneScore < 80) {
    summary += `Los h√°bitos de higiene oral son adecuados pero pueden optimizarse para prevenir futuros problemas. `
  } else {
    summary += `Los h√°bitos de higiene oral son excelentes y contribuyen positivamente al mantenimiento de la salud bucal. `
  }

  if (activeSymptoms.length > 0) {
    summary += `La presencia de s√≠ntomas activos (${activeSymptoms.join(', ')}) indica la necesidad de intervenci√≥n inmediata para prevenir complicaciones.`
  } else {
    summary += `La ausencia de s√≠ntomas activos es un indicador positivo del estado actual de salud bucal.`
  }

  // Tercer p√°rrafo con recomendaciones y pron√≥stico
  summary += `

**Recomendaciones Prioritarias y Pron√≥stico:**

Basado en este an√°lisis personalizado, se recomienda un enfoque terap√©utico ${riskFactors.length > 2 ? 'agresivo y multidisciplinario' : riskFactors.length > 0 ? 'vigilante y preventivo' : 'conservador y preventivo'} que incluya ${getPriorityRecommendations(riskFactors, hygieneScore, activeSymptoms)}. 

El pron√≥stico a corto plazo (3-6 meses) es ${getShortTermPrognosis(riskFactors, hygieneScore, activeSymptoms)}, mientras que el pron√≥stico a largo plazo (1-2 a√±os) depende principalmente de la adherencia a las recomendaciones terap√©uticas y la implementaci√≥n de cambios en el estilo de vida.

Con el seguimiento adecuado y la implementaci√≥n de las medidas preventivas recomendadas, se espera una ${getExpectedOutcome(riskFactors, hygieneScore)} en el estado de salud dental del paciente ${patient.name}.`

  return summary
}

// Funci√≥n auxiliar para calcular puntuaci√≥n de higiene
function calculateHygieneScore(hygieneHabits) {
  let score = 0
  
  // Cepillado diario (40 puntos)
  const brushings = parseInt(hygieneHabits.brushingsPerDay) || 0
  if (brushings >= 3) score += 40
  else if (brushings >= 2) score += 30
  else if (brushings >= 1) score += 20
  else score += 0
  
  // Uso de hilo dental (30 puntos)
  if (hygieneHabits.floss) score += 30
  
  // Uso de enjuague bucal (20 puntos)
  if (hygieneHabits.mouthwash) score += 20
  
  // Visitas regulares al dentista (10 puntos)
  if (hygieneHabits.lastCleaning && hygieneHabits.lastCleaning !== 'Nunca') score += 10
  
  return Math.min(score, 100)
}

// Funci√≥n auxiliar para obtener recomendaciones de higiene
function getHygieneRecommendations(hygieneHabits) {
  const recommendations = []
  
  if (parseInt(hygieneHabits.brushingsPerDay) < 2) {
    recommendations.push('frecuencia de cepillado')
  }
  if (!hygieneHabits.floss) {
    recommendations.push('uso de hilo dental')
  }
  if (!hygieneHabits.mouthwash) {
    recommendations.push('uso de enjuague bucal')
  }
  
  return recommendations.length > 0 ? recommendations.join(', ') : 't√©cnicas de higiene'
}

// Funci√≥n auxiliar para obtener recomendaciones prioritarias
function getPriorityRecommendations(riskFactors, hygieneScore, activeSymptoms) {
  const recommendations = []
  
  if (riskFactors.includes('diabetes')) {
    recommendations.push('control gluc√©mico estricto')
  }
  if (riskFactors.includes('hipertensi√≥n')) {
    recommendations.push('monitoreo de presi√≥n arterial')
  }
  if (hygieneScore < 60) {
    recommendations.push('mejora de h√°bitos de higiene oral')
  }
  if (activeSymptoms.includes('dolor dental')) {
    recommendations.push('evaluaci√≥n inmediata del dolor')
  }
  if (activeSymptoms.includes('sangrado gingival')) {
    recommendations.push('tratamiento periodontal')
  }
  
  return recommendations.length > 0 ? recommendations.join(', ') : 'seguimiento regular y medidas preventivas'
}

// Funci√≥n auxiliar para obtener pron√≥stico a corto plazo
function getShortTermPrognosis(riskFactors, hygieneScore, activeSymptoms) {
  if (activeSymptoms.length > 0) {
    return 'cauteloso debido a la presencia de s√≠ntomas activos'
  } else if (riskFactors.length > 2) {
    return 'moderado debido a m√∫ltiples factores de riesgo'
  } else if (hygieneScore < 60) {
    return 'favorable con mejoras en higiene oral'
  } else {
    return 'excelente con mantenimiento de h√°bitos actuales'
  }
}

// Funci√≥n auxiliar para obtener resultado esperado
function getExpectedOutcome(riskFactors, hygieneScore) {
  if (riskFactors.length > 2 && hygieneScore < 60) {
    return 'mejora gradual con tratamiento intensivo'
  } else if (riskFactors.length > 0 || hygieneScore < 80) {
    return 'mejora significativa con tratamiento adecuado'
  } else {
    return 'mantenimiento del excelente estado actual'
  }
}

// Endpoint para chat general
app.post('/api/ai/chat', async (req, res) => {
  try {
    const { messages, patientSnapshot } = req.body
    const msgs = [{ role: 'system', content: systemAssistant }]
    
    if (patientSnapshot) {
      msgs.push({ role: 'system', content: 'Ficha del paciente: ' + JSON.stringify(patientSnapshot) })
    }
    
    for (const m of messages) msgs.push(m)
    
    const completion = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: msgs,
      temperature: 0.5
    })
    
    const text = completion.choices?.[0]?.message?.content || ''
    res.json({ text })
  } catch (err) {
    res.status(500).json({ error: err.message })
  }
})

// Endpoint para asistente inteligente
app.post('/api/ai/intelligent-assistant', async (req, res) => {
  try {
    const { message, context } = req.body
    const lowerMessage = message.toLowerCase()
    let contextInfo = ''
    let patients = []

    // Buscar informaci√≥n de pacientes si se solicita
    if (lowerMessage.includes('paciente') || lowerMessage.includes('pacientes') || lowerMessage.includes('historia') || lowerMessage.includes('cl√≠nica')) {
      try {
        console.log('Intentando obtener informaci√≥n de pacientes...')
        
        // Intentar con 'patients' usando SQL directo para evitar RLS
        let patientCount = 0
        try {
          console.log('Intentando obtener pacientes...')
          
          // Primero, verificar si la tabla tiene datos
          const { count: countResult, error: countError } = await supabase
            .from('patients')
            .select('*', { count: 'exact', head: true })
          
          if (countError) {
            console.log('Error al contar pacientes:', countError)
          } else {
            patientCount = countResult || 0
            console.log(`Total de pacientes en la tabla: ${patientCount}`)
          }
          
          // Verificar la estructura de la tabla (primer registro)
          if (patientCount > 0) {
            const { data: samplePatient, error: sampleError } = await supabase
              .from('patients')
              .select('*')
              .limit(1)
            
            if (sampleError) {
              console.log('Error al obtener muestra de paciente:', sampleError)
            } else {
              console.log('Estructura del primer paciente:', Object.keys(samplePatient[0] || {}))
            }
          }
          
          // Intentar con la nueva funci√≥n RPC cl√≠nica
          const { data: patientsData, error: patientsError } = await supabase
            .rpc('get_patients_with_clinical_info')
          
          if (patientsError) {
            console.log('Error con RPC get_patients_with_clinical_info:', patientsError)
            
            // Intentar con RPC simple
            const { data: patientsDataSimple, error: patientsErrorSimple } = await supabase
              .rpc('get_all_patients_summary')
            
            if (patientsErrorSimple) {
              console.log('Error con RPC get_all_patients_summary:', patientsErrorSimple)
              
              // Intentar con consulta directa
              const { data: patientsData2, error: patientsError2 } = await supabase
                .from('patients')
                .select('id, name, email, phone, created_at')
                .limit(10)
                .order('created_at', { ascending: false })
              
              if (patientsError2) {
                console.log('Error con tabla "patients" directa:', patientsError2)
                
                // Intentar con 'users' (otro nombre com√∫n)
                const { data: usersData, error: usersError } = await supabase
                  .from('users')
                  .select('id, name, email, phone, created_at')
                  .limit(10)
                
                if (usersError) {
                  console.log('Error con tabla "users":', usersError)
                  
                  // Intentar con 'clients' (otro nombre com√∫n)
                  const { data: clientsData, error: clientsError } = await supabase
                    .from('clients')
                    .select('id, name, email, phone, created_at')
                    .limit(10)
                  
                  if (clientsError) {
                    console.log('Error con tabla "clients":', clientsError)
                  } else {
                    patients = clientsData
                    console.log('Pacientes encontrados en tabla "clients":', clientsData?.length || 0)
                  }
                } else {
                  patients = usersData
                  console.log('Pacientes encontrados en tabla "users":', usersData?.length || 0)
                }
              } else {
                patients = patientsData2
                console.log('Pacientes encontrados en tabla "patients" directa:', patientsData2?.length || 0)
              }
            } else {
              patients = patientsDataSimple
              console.log('Pacientes encontrados con RPC simple:', patientsDataSimple?.length || 0)
            }
                     } else {
             patients = patientsData
             console.log('Pacientes encontrados con RPC cl√≠nico:', patientsData?.length || 0)
             
             // Log detallado para debugging
             if (patientsData && patientsData.length > 0) {
               console.log('üîç Datos del primer paciente:', {
                 name: patientsData[0].patient_name,
                 total_citas: patientsData[0].total_appointments,
                 programadas: patientsData[0].scheduled_appointments,
                 completadas: patientsData[0].completed_appointments,
                 canceladas: patientsData[0].cancelled_appointments,
                 no_show: patientsData[0].no_show_appointments,
                 reprogramadas: patientsData[0].rescheduled_appointments
               })
             }
           }
        } catch (err) {
          console.log('Error general al obtener pacientes:', err)
        }
        
        if (patients && patients.length > 0) {
          contextInfo += `\n\nüë• **INFORMACI√ìN DE PACIENTES:**`
          contextInfo += `\n- Total de pacientes: ${patients.length}`
          
          // Mostrar informaci√≥n de TODOS los pacientes
          patients.forEach((patient, index) => {
            contextInfo += `\n\nüìã **PACIENTE ${index + 1}: ${patient.patient_name || patient.name || 'Sin nombre'}**`
            
            if (patient.patient_id) {
              // Si es RPC cl√≠nico o completo
              contextInfo += `\n- Nombre: ${patient.patient_name || 'Sin nombre'}`
              contextInfo += `\n- Edad: ${patient.patient_age || 'No especificada'}`
              contextInfo += `\n- Email: ${patient.patient_email || 'No especificado'}`
              contextInfo += `\n- Tel√©fono: ${patient.patient_phone || 'No especificado'}`
              contextInfo += `\n- Ocupaci√≥n: ${patient.patient_occupation || 'No especificada'}`
              contextInfo += `\n- Direcci√≥n: ${patient.patient_address || 'No especificada'}`
              contextInfo += `\n- Motivo de consulta: ${patient.patient_consultation_reason || 'No especificado'}`
              contextInfo += `\n- Fecha de registro: ${patient.patient_created_at}`
              
              // INFORMACI√ìN M√âDICA COMPLETA
              contextInfo += `\n\nüè• **HISTORIA M√âDICA:**`
              if (patient.allergies) {
                contextInfo += `\n- Alergias: ${patient.allergy_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.diabetes) {
                contextInfo += `\n- Diabetes: ${patient.diabetes_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.high_blood_pressure) {
                contextInfo += `\n- Presi√≥n alta: ${patient.high_blood_pressure_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.heart_attack) {
                contextInfo += `\n- Infarto: ${patient.heart_attack_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.asthma) {
                contextInfo += `\n- Asma: ${patient.asthma_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.covid19) {
                contextInfo += `\n- COVID-19: ${patient.covid19_date || 'S√≠ (sin fecha)'}`
              }
              
              // SALUD DENTAL
              contextInfo += `\n\nü¶∑ **SALUD DENTAL:**`
              if (patient.bruxism) {
                contextInfo += `\n- Bruxismo: S√≠`
              }
              if (patient.anesthesia_reaction) {
                contextInfo += `\n- Reacci√≥n a anestesia: ${patient.anesthesia_reaction_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.gum_bleeding) {
                contextInfo += `\n- Sangrado de enc√≠as: ${patient.gum_bleeding}`
              }
              if (patient.brushings_per_day) {
                contextInfo += `\n- Cepillados por d√≠a: ${patient.brushings_per_day}`
              }
              if (patient.floss) {
                contextInfo += `\n- Usa hilo dental: S√≠`
              }
              if (patient.mouthwash) {
                contextInfo += `\n- Usa enjuague: S√≠`
              }
              
              // HISTORIAL DE CITAS COMPLETO
              contextInfo += `\n\nüìÖ **HISTORIAL DE CITAS:**`
              contextInfo += `\n- Total de citas: ${patient.total_appointments || 0}`
              contextInfo += `\n- Citas programadas: ${patient.scheduled_appointments || 0}`
              contextInfo += `\n- Citas completadas: ${patient.completed_appointments || 0}`
              contextInfo += `\n- Citas canceladas: ${patient.cancelled_appointments || 0}`
              contextInfo += `\n- Citas no asistidas: ${patient.no_show_appointments || 0}`
              contextInfo += `\n- Citas reprogramadas: ${patient.rescheduled_appointments || 0}`
              
              if (patient.last_appointment_date) {
                contextInfo += `\n- √öltima cita: ${patient.last_appointment_date} (${patient.last_appointment_status || 'Sin estatus'})`
              }
              
              if (patient.next_scheduled_appointment) {
                contextInfo += `\n- Pr√≥xima cita: ${patient.next_scheduled_appointment}`
              }
              
            } else {
              // Si es RPC simple o consulta directa
              contextInfo += `\n- Nombre: ${patient.name || 'Sin nombre'}`
              contextInfo += `\n- Email: ${patient.email || 'No especificado'}`
              contextInfo += `\n- Tel√©fono: ${patient.phone || 'No especificado'}`
              contextInfo += `\n- Fecha de registro: ${patient.created_at || 'No especificada'}`
            }
          })
          
          // Resumen general
          contextInfo += `\n\nüìä **RESUMEN GENERAL:**`
          contextInfo += `\n- Total de pacientes en la base de datos: ${patients.length}`
          contextInfo += `\n- Pacientes con informaci√≥n completa: ${patients.filter(p => p.patient_name).length}`
          contextInfo += `\n- Pacientes con informaci√≥n b√°sica: ${patients.filter(p => !p.patient_name).length}`
          
        } else {
          contextInfo += `\n\nüë• **INFORMACI√ìN DE PACIENTES:**`
          contextInfo += `\n- No se encontraron pacientes en ninguna tabla conocida.`
          contextInfo += `\n\nPosibles causas:`
          contextInfo += `\n- La tabla est√° vac√≠a (${patientCount || 0} pacientes encontrados)`
          contextInfo += `\n- Problemas de permisos RLS`
          contextInfo += `\n- La clave de API no tiene permisos suficientes`
          
          // Si no hay pacientes, sugerir crear uno de prueba
          if (patientCount === 0) {
            contextInfo += `\n\nüí° SUGERENCIA: La tabla est√° vac√≠a.`
            contextInfo += `\nPara probar el sistema, crea un paciente desde la interfaz de la aplicaci√≥n.`
          }
        }
      } catch (err) {
        console.log('Error al obtener pacientes:', err.message)
        contextInfo += `\n\nError al obtener informaci√≥n de pacientes: ${err.message}`
      }
    }
    
    // Buscar paciente espec√≠fico por nombre
    if (lowerMessage.includes('paciente') && (lowerMessage.includes('buscar') || lowerMessage.includes('encontrar') || lowerMessage.includes('informaci√≥n de'))) {
      try {
        // Extraer nombre del paciente del mensaje
        const nameMatch = message.match(/(?:paciente|buscar|encontrar|informaci√≥n de)\s+([a-zA-Z√°√©√≠√≥√∫√±√Å√â√ç√ì√ö√ë\s]+)/i)
        if (nameMatch) {
          const searchName = nameMatch[1].trim()
          console.log('Buscando paciente espec√≠fico:', searchName)
          
          // Primero buscar con la funci√≥n de b√∫squeda
          const { data: searchResults, error: searchError } = await supabase
            .rpc('search_patients', { search_term: searchName })
          
          if (!searchError && searchResults && searchResults.length > 0) {
            // Si encontramos pacientes, obtener informaci√≥n completa del primero
            const firstResult = searchResults[0]
            console.log('Paciente encontrado, obteniendo informaci√≥n completa:', firstResult.patient_id)
            
            const { data: completePatient, error: completeError } = await supabase
              .rpc('get_complete_patient_history', { patient_uuid: firstResult.patient_id })
            
            if (!completeError && completePatient && completePatient.length > 0) {
              const patient = completePatient[0]
              contextInfo += `\n\nüîç **PACIENTE ENCONTRADO - INFORMACI√ìN COMPLETA:**`
              contextInfo += `\n\nüìã **DATOS B√ÅSICOS:**`
              contextInfo += `\n- Nombre: ${patient.patient_name}`
              contextInfo += `\n- Edad: ${patient.patient_age || 'No especificada'}`
              contextInfo += `\n- Email: ${patient.patient_email || 'No especificado'}`
              contextInfo += `\n- Tel√©fono: ${patient.patient_phone || 'No especificado'}`
              contextInfo += `\n- M√≥vil: ${patient.patient_mobile || 'No especificado'}`
              contextInfo += `\n- Ocupaci√≥n: ${patient.patient_occupation || 'No especificada'}`
              contextInfo += `\n- Estado civil: ${patient.patient_marital_status || 'No especificado'}`
              contextInfo += `\n- Direcci√≥n: ${patient.patient_address || 'No especificada'}`
              contextInfo += `\n- Colonia: ${patient.patient_neighborhood || 'No especificada'}`
              contextInfo += `\n- CP: ${patient.patient_zip_code || 'No especificado'}`
              contextInfo += `\n- Referido por: ${patient.patient_referred_by || 'No especificado'}`
              contextInfo += `\n- Motivo de consulta: ${patient.patient_consultation_reason || 'No especificado'}`
              contextInfo += `\n- Fecha de registro: ${patient.patient_created_at}`
              
              // INFORMACI√ìN M√âDICA COMPLETA
              contextInfo += `\n\nüè• **HISTORIA M√âDICA COMPLETA:**`
              
              // Salud general
              if (patient.current_treatment) {
                contextInfo += `\n- Tratamiento actual: ${patient.current_treatment_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.flu_symptoms) contextInfo += `\n- S√≠ntomas de gripe: S√≠`
              if (patient.allergies) {
                contextInfo += `\n- Alergias: ${patient.allergy_details || 'S√≠ (sin detalles)'}`
              }
              
              // Antecedentes m√©dicos
              if (patient.rheumatic_fever) {
                contextInfo += `\n- Fiebre reum√°tica: ${patient.rheumatic_fever_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.high_blood_pressure) {
                contextInfo += `\n- Presi√≥n alta: ${patient.high_blood_pressure_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.low_blood_pressure) {
                contextInfo += `\n- Presi√≥n baja: ${patient.low_blood_pressure_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.heart_attack) {
                contextInfo += `\n- Infarto: ${patient.heart_attack_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.asthma) {
                contextInfo += `\n- Asma: ${patient.asthma_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.arthritis) {
                contextInfo += `\n- Artritis: ${patient.arthritis_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.epilepsy) {
                contextInfo += `\n- Epilepsia: ${patient.epilepsy_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.anemia) {
                contextInfo += `\n- Anemia: ${patient.anemia_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.hiv) {
                contextInfo += `\n- VIH: ${patient.hiv_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.hepatitis) {
                contextInfo += `\n- Hepatitis: ${patient.hepatitis_type || 'S√≠ (sin tipo)'}`
              }
              if (patient.diabetes) {
                contextInfo += `\n- Diabetes: ${patient.diabetes_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.tuberculosis) {
                contextInfo += `\n- Tuberculosis: ${patient.tuberculosis_location || 'S√≠ (sin ubicaci√≥n)'}`
              }
              if (patient.cancer) {
                contextInfo += `\n- C√°ncer: ${patient.cancer_location || 'S√≠ (sin ubicaci√≥n)'}`
              }
              if (patient.std) {
                contextInfo += `\n- ETS: ${patient.std_type || 'S√≠ (sin tipo)'}`
              }
              if (patient.kidney_disease) {
                contextInfo += `\n- Enfermedad renal: ${patient.kidney_disease_type || 'S√≠ (sin tipo)'}`
              }
              if (patient.liver_disease) {
                contextInfo += `\n- Enfermedad hep√°tica: ${patient.liver_disease_type || 'S√≠ (sin tipo)'}`
              }
              if (patient.covid19) {
                contextInfo += `\n- COVID-19: ${patient.covid19_date || 'S√≠ (sin fecha)'}`
              }
              if (patient.other_diseases) {
                contextInfo += `\n- Otras enfermedades: ${patient.other_diseases_details || 'S√≠ (sin detalles)'}`
              }
              
              // Enfermedades recientes
              contextInfo += `\n\nü©∫ **ENFERMEDADES RECIENTES:**`
              if (patient.serious_illness_3_years) {
                contextInfo += `\n- Enfermedad grave en 3 a√±os: ${patient.serious_illness_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.hospitalization_5_years) {
                contextInfo += `\n- Hospitalizaci√≥n en 5 a√±os: ${patient.hospitalization_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.bleeding_treatment) {
                contextInfo += `\n- Tratamiento de sangrado: ${patient.bleeding_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.nervous_problems) {
                contextInfo += `\n- Problemas nerviosos: ${patient.nervous_problems_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.fainting) {
                contextInfo += `\n- Desmayos: ${patient.fainting_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.seizures) {
                contextInfo += `\n- Convulsiones: ${patient.seizures_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.frequent_herpes) contextInfo += `\n- Herpes frecuente: S√≠`
              
              // H√°bitos
              contextInfo += `\n\nüö¨ **H√ÅBITOS:**`
              if (patient.smoking) {
                contextInfo += `\n- Fuma: ${patient.cigarettes_per_day || 'S√≠ (sin cantidad)'} cigarrillos por d√≠a`
              }
              if (patient.alcohol) {
                contextInfo += `\n- Consume alcohol: ${patient.alcohol_frequency || 'S√≠ (sin frecuencia)'}`
              }
              if (patient.drugs) {
                contextInfo += `\n- Consume drogas: ${patient.drugs_details || 'S√≠ (sin detalles)'}`
              }
              
              // Informaci√≥n espec√≠fica para mujeres
              if (patient.last_period || patient.menstrual_complications || patient.birth_control || patient.pregnancy || patient.breastfeeding) {
                contextInfo += `\n\nüë© **INFORMACI√ìN ESPEC√çFICA (MUJERES):**`
                if (patient.last_period) {
                  contextInfo += `\n- √öltima menstruaci√≥n: ${patient.last_period}`
                }
                if (patient.menstrual_complications) {
                  contextInfo += `\n- Complicaciones menstruales: ${patient.menstrual_complications_details || 'S√≠ (sin detalles)'}`
                }
                if (patient.birth_control) contextInfo += `\n- Control de natalidad: S√≠`
                if (patient.pregnancy) contextInfo += `\n- Embarazada: S√≠`
                if (patient.abortions) {
                  contextInfo += `\n- Abortos: ${patient.abortions}`
                }
                if (patient.breastfeeding) contextInfo += `\n- Amamantando: S√≠`
              }
              
              // SALUD DENTAL COMPLETA
              contextInfo += `\n\nü¶∑ **SALUD DENTAL COMPLETA:**`
              if (patient.bruxism) contextInfo += `\n- Bruxismo: S√≠`
              if (patient.teeth_appearance) contextInfo += `\n- Problemas de apariencia dental: S√≠`
              if (patient.bad_breath) contextInfo += `\n- Mal aliento: S√≠`
              if (patient.chewing_difficulty) contextInfo += `\n- Dificultad para masticar: S√≠`
              if (patient.anesthesia_reaction) {
                contextInfo += `\n- Reacci√≥n a anestesia: ${patient.anesthesia_reaction_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.recent_pain) contextInfo += `\n- Dolor reciente: S√≠`
              if (patient.gum_bleeding) {
                contextInfo += `\n- Sangrado de enc√≠as: ${patient.gum_bleeding}`
              }
              if (patient.jaw_clicking) {
                contextInfo += `\n- Chasquido de mand√≠bula: ${patient.jaw_clicking}`
              }
              if (patient.loose_teeth) contextInfo += `\n- Dientes flojos: S√≠`
              if (patient.food_between_teeth) contextInfo += `\n- Comida entre dientes: S√≠`
              if (patient.lip_biting) contextInfo += `\n- Muerde labios: S√≠`
              if (patient.object_biting) {
                contextInfo += `\n- Muerde objetos: ${patient.object_biting_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.mouth_breathing) contextInfo += `\n- Respiraci√≥n bucal: S√≠`
              if (patient.teeth_importance) {
                contextInfo += `\n- Importancia de los dientes: ${patient.teeth_importance}`
              }
              if (patient.dentist_comfort) {
                contextInfo += `\n- Comodidad con el dentista: ${patient.dentist_comfort}`
              }
              if (patient.dentist_comfort_other) {
                contextInfo += `\n- Otros comentarios sobre comodidad: ${patient.dentist_comfort_other}`
              }
              
              // Entorno y h√°bitos de higiene
              contextInfo += `\n\nüßº **H√ÅBITOS DE HIGIENE:**`
              if (patient.education) {
                contextInfo += `\n- Educaci√≥n: ${patient.education}`
              }
              if (patient.favorite_color) {
                contextInfo += `\n- Color favorito: ${patient.favorite_color}`
              }
              if (patient.physical_activity) {
                contextInfo += `\n- Actividad f√≠sica: ${patient.physical_activity_type || 'S√≠ (sin tipo)'}`
              }
              if (patient.brushings_per_day) {
                contextInfo += `\n- Cepillados por d√≠a: ${patient.brushings_per_day}`
              }
              if (patient.floss) contextInfo += `\n- Usa hilo dental: S√≠`
              if (patient.mouthwash) contextInfo += `\n- Usa enjuague: S√≠`
              if (patient.other_hygiene) {
                contextInfo += `\n- Otra higiene: ${patient.other_hygiene_details || 'S√≠ (sin detalles)'}`
              }
              if (patient.vaccination) {
                contextInfo += `\n- Vacunaci√≥n: ${patient.vaccination}`
              }
              
              // Antecedentes familiares
              if (patient.family_history) {
                contextInfo += `\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ **ANTECEDENTES FAMILIARES:**`
                contextInfo += `\n${patient.family_history}`
              }
              
              // HISTORIAL DE CITAS
              contextInfo += `\n\nüìÖ **HISTORIAL DE CITAS:**`
              contextInfo += `\n- Total de citas: ${patient.total_appointments || 0}`
              contextInfo += `\n- Citas completadas: ${patient.completed_appointments || 0}`
              contextInfo += `\n- Pr√≥ximas citas: ${patient.upcoming_appointments || 0}`
              if (patient.last_appointment_date) {
                contextInfo += `\n- √öltima cita: ${patient.last_appointment_date}`
              }
              if (patient.next_appointment_date) {
                contextInfo += `\n- Pr√≥xima cita: ${patient.next_appointment_date}`
              }
              
              // Odontograma y archivos
              contextInfo += `\n\nüìä **RECURSOS CL√çNICOS:**`
              if (patient.has_odontogram) {
                contextInfo += `\n- Odontograma: Disponible (actualizado: ${patient.odontogram_updated_at})`
              } else {
                contextInfo += `\n- Odontograma: No disponible`
              }
              if (patient.total_files > 0) {
                contextInfo += `\n- Archivos: ${patient.total_files} archivos (tipos: ${patient.file_types?.join(', ') || 'varios'})`
              } else {
                contextInfo += `\n- Archivos: No hay archivos`
              }
              if (patient.total_ai_reports > 0) {
                contextInfo += `\n- Informes IA: ${patient.total_ai_reports} informes (√∫ltimo: ${patient.last_ai_report_date})`
              } else {
                contextInfo += `\n- Informes IA: No hay informes`
              }
              
              // Firmas
              if (patient.patient_signature || patient.date) {
                contextInfo += `\n\n‚úçÔ∏è **FIRMAS:**`
                if (patient.patient_signature) contextInfo += `\n- Firma del paciente: ${patient.patient_signature}`
                if (patient.date) contextInfo += `\n- Fecha: ${patient.date}`
              }
              
            } else {
              contextInfo += `\n\nüîç **PACIENTE ENCONTRADO (INFORMACI√ìN B√ÅSICA):**`
              searchResults.forEach(patient => {
                contextInfo += `\n\nüìã **${patient.patient_name}:**`
                contextInfo += `\n- Email: ${patient.patient_email || 'No especificado'}`
                contextInfo += `\n- Tel√©fono: ${patient.patient_phone || 'No especificado'}`
                contextInfo += `\n- Edad: ${patient.patient_age || 'No especificada'}`
                contextInfo += `\n- Total de citas: ${patient.total_appointments || 0}`
                if (patient.last_appointment_date) {
                  contextInfo += `\n- √öltima cita: ${patient.last_appointment_date}`
                }
              })
            }
          } else {
            contextInfo += `\n\nüîç **B√öSQUEDA DE PACIENTE:**`
            contextInfo += `\nNo se encontr√≥ ning√∫n paciente con el nombre "${searchName}"`
          }
        }
      } catch (err) {
        console.log('Error al buscar paciente espec√≠fico:', err.message)
      }
    }
    
    // Buscar informaci√≥n de agenda si se solicita
    if (lowerMessage.includes('agenda') || lowerMessage.includes('cita') || lowerMessage.includes('citas') || lowerMessage.includes('consultas')) {
      try {
        // Obtener citas del mes actual
        const currentDate = new Date()
        const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1)
        const lastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0)
        
        console.log('üîç Buscando citas del mes:', {
          desde: firstDayOfMonth.toISOString().split('T')[0],
          hasta: lastDayOfMonth.toISOString().split('T')[0]
        })
        
        const { data: appointments, error } = await supabase
          .from('appointments')
          .select(`
            id, 
            appointment_date, 
            appointment_time, 
            appointment_type, 
            status,
            patients(name, email)
          `)
          .gte('appointment_date', firstDayOfMonth.toISOString().split('T')[0])
          .lte('appointment_date', lastDayOfMonth.toISOString().split('T')[0])
          .order('appointment_date', { ascending: true })
        
        if (!error && appointments) {
          console.log('üìÖ Citas encontradas del mes:', appointments.length)
          
          // Agrupar por estatus
          const statusCounts = {}
          appointments.forEach(apt => {
            statusCounts[apt.status] = (statusCounts[apt.status] || 0) + 1
          })
          
          contextInfo += `\n\nüìÖ **CONSULTAS/CITAS DEL MES ACTUAL:**`
          contextInfo += `\n- Total de citas: ${appointments.length}`
          
          // Mostrar conteo por estatus
          if (Object.keys(statusCounts).length > 0) {
            contextInfo += `\n- Por estatus:`
            Object.entries(statusCounts).forEach(([status, count]) => {
              contextInfo += `\n  ‚Ä¢ ${status}: ${count}`
            })
          }
          
          // Mostrar citas individuales (m√°ximo 15 para no saturar)
          const citasAMostrar = appointments.slice(0, 15)
          contextInfo += `\n\nüìã **DETALLE DE CITAS:**`
          citasAMostrar.forEach(apt => {
            const fecha = new Date(apt.appointment_date).toLocaleDateString('es-ES')
            contextInfo += `\n- ${fecha} ${apt.appointment_time}: ${apt.patients?.name || 'Paciente'} - ${apt.appointment_type} (${apt.status})`
          })
          
          if (appointments.length > 15) {
            contextInfo += `\n\n... y ${appointments.length - 15} citas m√°s`
          }
        } else {
          console.log('‚ùå Error al obtener citas:', error)
          contextInfo += `\n\nüìÖ **CONSULTAS/CITAS DEL MES:**`
          contextInfo += `\n- No se pudieron obtener las citas del mes actual`
        }
      } catch (err) {
        console.log('Error al obtener citas:', err.message)
        contextInfo += `\n\nüìÖ **CONSULTAS/CITAS DEL MES:**`
        contextInfo += `\n- Error al obtener las citas: ${err.message}`
      }
    }
    
    // Buscar estad√≠sticas si se solicita
    if (lowerMessage.includes('estad√≠stica') || lowerMessage.includes('estad√≠sticas') || lowerMessage.includes('resumen')) {
      try {
        // Contar pacientes totales
        const { count: totalPatients } = await supabase
          .from('patients')
          .select('*', { count: 'exact', head: true })
        
        // Contar citas del mes actual
        const currentMonth = new Date().toISOString().slice(0, 7)
        const { count: monthlyAppointments } = await supabase
          .from('appointments')
          .select('*', { count: 'exact', head: true })
          .gte('appointment_date', `${currentMonth}-01`)
          .lt('appointment_date', `${currentMonth}-32`)
        
        // Contar citas por estado
        const { data: statusCounts } = await supabase
          .from('appointments')
          .select('status')
        
        const statusSummary = {}
        if (statusCounts) {
          statusCounts.forEach(apt => {
            statusSummary[apt.status] = (statusSummary[apt.status] || 0) + 1
          })
        }
        
        contextInfo += `\n\nüìä **ESTAD√çSTICAS DE LA CL√çNICA:**`
        contextInfo += `\n- Total de pacientes: ${totalPatients || 0}`
        contextInfo += `\n- Citas este mes: ${monthlyAppointments || 0}`
        // Estad√≠sticas detalladas por estatus
        if (Object.keys(statusSummary).length > 0) {
          contextInfo += `\n\nüìã **CITAS POR ESTATUS:**`
          if (statusSummary.scheduled) contextInfo += `\n- Programadas: ${statusSummary.scheduled}`
          if (statusSummary.completed) contextInfo += `\n- Completadas: ${statusSummary.completed}`
          if (statusSummary.cancelled) contextInfo += `\n- Canceladas: ${statusSummary.cancelled}`
          if (statusSummary.no_show) contextInfo += `\n- No asistidas: ${statusSummary.no_show}`
          if (statusSummary.rescheduled) contextInfo += `\n- Reprogramadas: ${statusSummary.rescheduled}`
        }
      } catch (err) {
        console.log('Error al obtener estad√≠sticas:', err.message)
      }
    }
    
    // Crear el mensaje para OpenAI
    const messages = [
      { role: 'system', content: systemIntelligentAssistant },
      { role: 'user', content: `Contexto de la cl√≠nica:${contextInfo}\n\nConsulta del usuario: ${message}` }
    ]
    
    const completion = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages,
      temperature: 0.3
    })
    
    const text = completion.choices?.[0]?.message?.content || ''
    res.json({ text, context: contextInfo })
    
  } catch (err) {
    console.error('Error en asistente inteligente:', err)
    res.status(500).json({ error: err.message })
  }
})

// Endpoint para chat de pacientes
app.post('/api/ai/patient-chat', async (req, res) => {
  try {
    const { messages, patientName } = req.body
    
    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({ error: 'Mensajes requeridos' })
    }

    // Crear el mensaje para OpenAI
    const completion = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        { role: 'system', content: systemPatientAssistant },
        ...messages
      ],
      temperature: 0.7
    })
    
    const text = completion.choices?.[0]?.message?.content || ''
    res.json({ text, model: 'gpt-4o-mini' })
    
  } catch (err) {
    console.error('Error en chat de pacientes:', err)
    res.status(500).json({ error: err.message })
  }
})

const port = process.env.PORT || 3001
app.listen(port, () => console.log('AI server running on port', port))